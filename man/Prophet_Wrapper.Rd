% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProphetWrapper.R
\name{Prophet_Wrapper}
\alias{Prophet_Wrapper}
\title{Prophet Wrapper}
\usage{
Prophet_Wrapper(df, list_params, holidays = NULL, best_model_in = "train",
  plotFrom = NULL, main_accuracy_metric = "MAPE",
  train_set_imp_perc = 0.5)
}
\arguments{
\item{df}{A data-frame with a numeric column, a date type column, a regressor and a column train (for train/test split). The 'train' column has to have 1 and 0 only where 1 refer to training set.}

\item{list_params}{A list with the following parameters:
 \itemize{
 \item{\strong{target_variable}}  {The name of the target variable to predict. Has to be included in df.}
 \item{\strong{changepoint.prior.scale}}  {A regularization parameter (vector or single value) for the automatic changepoint definitions of Prophet to define piecewise trend blocks. If the trend changes are being overfit (too much flexibility) or underfit (not enough flexibility), you can adjust the strength of this argument. By default Prophet sets this parameter to 0.05. Increasing it will make the trend more flexible.}
 \item{\strong{regressor.prior.scale}}  {A regularization parameter (vector or single value) for the external regressor. If the regressor is being overfit (too much flexibility) or underfit (not enough flexibility), you can adjust the strength of this argument. By default Prophet sets this parameter to 0.05. Increasing it will make the trend more flexible.}
 \item{\strong{weekly.seasonality}}  {Fit weekly seasonality. Can be 'auto', TRUE, FALSE, or a number of Fourier terms to generate.}
 \item{\strong{yearly.seasonality}}  {Fit yearly seasonality. Can be 'auto', TRUE, FALSE, or a number of Fourier terms to generate.}
 \item{\strong{regressor}}  {The name of the external regressor to include in the model. It has to exist on df as a column.}
 \item{\strong{standardize_regressor}}  {Bool, specify whether this regressor will be standardized prior to fitting. Can be 'auto' (standardize if not binary), True, or False.}
 \item{\strong{log_transformation}}  {Bool, specify whether the Target Variable will be log transformed pre-fitting the models or not.}
}}

\item{holidays}{A data-frame with columns holiday (character) and ds (date type)and optionally columns lower_window and upper_window which specify a range of days around the date to be included as holidays. lower_window=-2 will include 2 days prior to the date as holidays. Also optionally can have a column prior_scale specifying the prior scale for each holiday. It defaults to NULL in which case no holidays are used.}

\item{best_model_in}{A character value either: 'train', 'test' or 'mix_train_test'. Defaults to 'train'. This parameter defines the criteria to pick the best model - either based on accuracy on training set or in test set. The user might have different business requirements.}

\item{plotFrom}{A character value ('yyyy-mm-dd') representing a date to filter the data from to plot the best model based on the 'best_model_in' parameter (actuals vs forecast).}

\item{main_accuracy_metric}{A character value either: 'MAPE', 'MSE', 'MAE' or 'RMSE' (it defaults to MAPE). This defines the criteria for selecting the best model (together with the 'best_model_in' parameter).}

\item{train_set_imp_perc}{A numeric input between 0 and 1 representing the weight to give to the training set results relatively to the test set. Defaults to 0.5 (mean results). This parameter only affects the results when 'best_model_in' is set to 'mix_train_test'. When set to 1 the results are the same as setting 'best_model_in' to 'train'.}
}
\value{
This function returns a list with 3 elements:
 \itemize{
 \item{\strong{Accuracy_Overview}}  {A data-frame with all the trained models and accuracy metrics divided by train and test set. The metrics are: MAPE', 'MSE', 'MAE' or 'RMSE'.}
 \item{\strong{Actuals_vs_Predictions}}  {A data-frame with the actuals vs predictions and with upper and lower bound confidence intervals. This output also contains a column 'diff' with the Absolute Percentage Error for each prediction allowing the user to easily identify areas of miss-prediction. If log_transformation is applied the output will also include log predictions and log actuals.}
 \item{\strong{Plot_Actual_Predictions}}  {A ggplot with actuals vs predictions and a separator for train/test split for the best model (based on 'best_model_in' and 'main_accuracy_metric' parameters).}
}
}
\description{
This is a function that wraps up (\href{https://facebook.github.io/prophet/docs/installation.html}{Prophet}) package functionality, expanding the possibilities currently offered by the Facebook developed R package.
The main rationale behind the package was to build a reproducible function to test several models simultaneously. The model doesn't perform Cross-Validation (yet!) but allows the user to define a train/test split and evaluate the models produced under different scenarios.
}
\details{
Since this is a wrapper for Prophet, you can find extra parameters information on Prophet documentation \code{?prophet}.
}
\examples{
\dontrun{

parameters = list(changepoint.prior.scale = c(0.2, 0.3),
regressor.prior.scale = c(0.01, 0.02),
weekly.seasonality = TRUE,
yearly.seasonality = TRUE,
standardize_regressor = TRUE,
log_transformation = TRUE,
target_variable = "y",
regressor = "x" )


test = Prophet_Wrapper(df = df_example,
                    list_params = parameters,
                    holidays = holidays,
                    best_model_in = "train",
                    main_accuracy_metric = "MAPE",
                    train_set_imp_perc = 0.5)

}

}
